package src;

import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.regex.*;
import org.junit.*;
import static org.junit.Assert.*;

import java.util.ArrayList;

import junit.framework.JUnit4TestAdapter;

import org.junit.*;

import static org.junit.Assert.*;
import junit.framework.JUnit4TestAdapter;
import static org.junit.Assert.*;
import org.junit.Test;


public class JUnitCasiYES
{
    // Roulette Testing--------------------------------------------------------
    /**
     * Checks if the constructor works in roulette
     */
    @Test
    public void rouletteConstructorTest()
    {
        Roulette r = new Roulette();
        assertEquals( (int)r.getMoney(), 1000 );
        assertEquals( (int)r.getBoard().get( 0 ), 0 );
        assertEquals( r.getBoard().keySet().size(), 37 );
    }


    /**
     * Checks the roulette accessor methods. 
     */
    @Test
    public void rouletteAccessorMethod()
    {
        Roulette r = new Roulette();
        r.setBetAmount( 50 );
        r.setBetSquare( 14 );
        r.setBetType( 4 );
        assertEquals( r.getBetAmount(), 50 );
        assertEquals( r.getBetSquare(), 14 );
        assertEquals( r.getBetType(), 4 );
    }


    /**
     * Tests the bet method in roulette for all scenarios
     */
    @Test
    public void rouletteBetMethod()
    {
        Roulette r = new Roulette( 1 );
        r.setBetAmount( 5 );
        // Testing the square
        r.setBetType( 1 );
        r.setBetSquare( 1 );
        assertEquals( r.bet(), 180 );
        // Testing the column
        r.setBetType( 2 );
        r.setBetSquare( 1 );
        assertEquals( r.bet(), 15 );
        // Testing the color
        r.setBetType( 3 );
        r.setBetSquare( 1 );
        assertEquals( r.bet(), 10 );
        // Testing Even or odd
        r.setBetType( 4 );
        r.setBetSquare( 1 );
        assertEquals( r.bet(), 10 );
        // Testing 1 to 18
        Roulette test = new Roulette( 18 );
        test.setBetAmount( 5 );
        test.setBetType( 5 );
        test.setBetSquare( 18 );
        assertEquals( test.bet(), 10 );
        // Testing 19 to 36
        Roulette test2 = new Roulette( 20 );
        test2.setBetAmount( 5 );
        test2.setBetType( 6 );
        test2.setBetSquare( 36 );
        assertEquals( test2.bet(), 10 );
        // Testing too much and too little money
        Roulette test3 = new Roulette();
        test3.setBetAmount( 1005 );
        test3.setBetType( 5 );
        test3.setBetSquare( 18 );
        assertEquals( test3.bet(), -1 );
        Roulette test4 = new Roulette();
        test4.setBetAmount( 2 );
        test4.setBetType( 5 );
        test4.setBetSquare( 18 );
        assertEquals( test4.bet(), -1 );
        // Testing failure
        Roulette r2 = new Roulette( 20 );
        r2.setBetType( 1 );
        r2.setBetAmount( 100 );
        r2.setBetSquare( 2 );
        assertEquals( r2.bet(), 0 );
    }


    /**
     * Test the bingo constructor
     */
    @Test
    public void bingoConstructor()
    {
        Bingo bingo = new Bingo();
        assertEquals( bingo.myBoard().length, 5 );
        assertEquals( bingo.myBoard()[0].length, 5 );
        assertNotNull( bingo.getRand() );
    }


    /**
     * Checks if the check method works on horizontal
     */
    @Test
    public void bingoCheckHorzMethod()
    {
        Bingo bingo = new Bingo();
        int[][] test = new int[5][5];
        for ( int col = 1; col <= 5; col++ )
        {
            for ( int row = 0; row < 5; row++ )
            {
                test[row][col - 1] = 1;
            }
        }
        for ( int r = 0; r < 5; r++ )
        {
            test[r][0] = 0;
        }
        bingo.setBoard( test );
        assertEquals( true, bingo.check() );
    }


    /**
     * Sees if the check method works in vertical
     */
    @Test
    public void bingoCheckVertMethod()
    {
        Bingo bingo = new Bingo();
        int[][] test = new int[5][5];
        for ( int col = 1; col <= 5; col++ )
        {
            for ( int row = 0; row < 5; row++ )
            {
                test[row][col - 1] = 1;
            }
        }
        for ( int r = 0; r < 5; r++ )
        {
            test[0][r] = 0;
        }
        bingo.setBoard( test );
        assertEquals( true, bingo.check() );
    }


    /**
     * Sees if the check() method works in diagonal
     */
    @Test
    public void bingoCheckCross()
    {
        int[][] test = new int[5][5];
        for ( int col = 1; col <= 5; col++ )
        {
            for ( int row = 0; row < 5; row++ )
            {
                test[row][col - 1] = 1;
            }
        }
        for ( int row = 0; row < 5; row++ )
        {
            test[row][row] = 0;
        }

        Bingo bingo = new Bingo();
        bingo.setBoard( test );
        assertEquals( true, bingo.check() );
    }


    /**
     * Sees if the check() method works in diagonal reverse
     */
    @Test
    public void bingoCheckVertAcross()
    {
        int[][] test = new int[5][5];
        for ( int col = 1; col <= 5; col++ )
        {
            for ( int row = 0; row < 5; row++ )
            {
                test[row][col - 1] = 1;
            }
        }
        int down = 4;
        for ( int other = 0; other < 5; other++ )
        {
            test[down][other] = 0;
            down--;
        }

        Bingo bingo = new Bingo();
        bingo.setBoard( test );
        assertEquals( true, bingo.check() );
    }
    
    /**
     * Sees if teh check() method returns false
     */
    @Test 
    public void bingoCheckFalse()
    {
        int[][] test = new int[5][5];
        for ( int col = 1; col <= 5; col++ )
        {
            for ( int row = 0; row < 5; row++ )
            {
                test[row][col - 1] = 1;
            }
        }
        Bingo bingo = new Bingo();
        bingo.setBoard( test );
        assertEquals( false, bingo.check() );
    }


    /**
     * Tests the ability to draw a bingo board
     */
    @Test
    public void bingoDrawBoard()
    {
        Bingo bingo = new Bingo();
        bingo.drawBoard();
        assertNotNull( bingo.myBoard() );
    }
    
    /**
     * Tests the bingo increment method.
     */
    @Test
    public void bingoIncrement()
    {
        Bingo bingo = new Bingo();
        bingo.drawBoard();
        while( bingo.check() == false)
        {
            bingo.increment();
        }
        assertEquals( true, bingo.check());
    }
}

    /**
     * Casino tests: cardGetVal - constructs Card and checks value cardGetName -
     * constructs Card and checks name cardConstructor - constructs Card and
     * checks set variables cardSetAce - constructs Card and checks setAce
     * method casinoGetMoney - constructs Casino and checks money casinoSetMoney
     * - constructs Casino and checks setMoney method casinoAddMoney -
     * constructs Casino and checks addMoney method casinoRemoveMoney -
     * constructs Casino and checks removeMoney method (other junits documented
     * above method)
     */

    // Card tests
    @Test
    public void cardGetVal()
    {

        String testString = "test";
        int testInt = 1000;

        Card c = new Card( testString, testInt );
        assertEquals( testInt, c.getVal() );
    }


    @Test
    public void cardGetName()
    {
        String testString = "test";
        int testInt = 1000;
        Card c = new Card( testString, testInt );
        assertTrue( "Card.getName() returns incorrectly", c.getName() == testString );
    }


    @Test
    public void cardConstructor()
    {
        String testString = "test";
        int testInt = 1000;
        Card c = new Card( testString, testInt );
        assertEquals( c.getVal(), testInt );
        assertEquals( c.getName(), testString );
    }


    @Test
    public void cardSetAce()
    {
        String testString = "test";
        int testInt = 1000;
        Card c = new Card( testString, testInt );
        c.setAce( 0 );
        assertTrue( "Card.setAce() returns incorrectly", c.getVal() == 0 );
    }


    // Casino tests
    @Test
    public void casinoGetMoney()
    {
        int testInt = 1000;
        Casino c = new Casino( testInt );
        assertTrue( "Casino.getMoney() returns incorrectly", c.getMoney() == testInt );
    }


    @Test
    public void casinoConstructor()
    {
        int testInt = 1000;
        Casino c = new Casino( testInt );
        assertTrue( "Casino constructor doesn't work", c.getMoney() == testInt );
    }


    @Test
    public void casinoSetMoney()
    {
        int testInt = 1000;
        Casino c = new Casino( testInt );
        c.setMoney( 0 );
        assertTrue( "Casino.setMoney() returns incorrectly", c.getMoney() == 0 );
    }


    @Test
    public void casinoAddMoney()
    {
        int testInt = 1000;
        Casino c = new Casino( testInt );
        c.addMoney( testInt );
        assertTrue( "Casino.AddMoney() returns incorrectly", c.getMoney() == 2 * testInt );
    }


    @Test
    public void casinoRemoveMoney()
    {
        int testInt = 1000;
        Casino c = new Casino( testInt );
        c.removeMoney( testInt );
        assertTrue( "Card.RemoveMoney() returns incorrectly", c.getMoney() == 0 );
    }


    // SlotMachine tests
    /**
     * 
     * creates slot machine, checks that result was created by constructor
     */
    @Test
    public void slotConstructor()
    {
        SlotMachine s = new SlotMachine();
        assertEquals( 3, s.getResult().length );
    }


    /**
     * 
     * checks that spin method gave user results and reduced balance by 10
     */
    @Test
    public void slotSpin()
    {
        int testInt = 100;
        Casino c = new Casino( testInt );
        SlotMachine s = new SlotMachine();
        s.spin();
        assertEquals( 90, c.getMoney() );
        assertNotNull( s.getResult()[0] );
        assertNotNull( s.getResult()[1] );
        assertNotNull( s.getResult()[2] );
    }


    /**
     * 
     * checks that result is returned
     */
    @Test
    public void slotgetResult()
    {
        SlotMachine s = new SlotMachine();
        assertNotNull( s.getResult() );
    }


    /**
     * 
     * checks that a payout is determined. Checks all possible scenarios
     */

    /**
     * 
     * checks that result is returned
     */
    @Test
    public void slotgetPay()
    {
        SlotMachine s = new SlotMachine();
        s.spin();
        assertTrue( s.getPay() >= 0 );
    }


    @Test
    public void slotPayout()
    {
        SlotMachine s = new SlotMachine();
        // spin will call payout
        s.spin();
        if ( s.getResult()[0] == "Fulk" && s.getResult()[1] == "Fulk"
            && s.getResult()[2] == "Fulk" )
        {
            assertEquals( s.getPay(), 9000 );
        }
        else if ( ( s.getResult()[0] == "Penguin" && s.getResult()[1] == "Penguin"
            && s.getResult()[2] == "Penguin" )
            || ( s.getResult()[0] == "Diamond" && s.getResult()[1] == "Diamond"
                && s.getResult()[2] == "Diamond" ) )
        {
            assertEquals( s.getPay(), 4500 );
        }
        else if ( ( s.getResult()[0] != "Fulk" && s.getResult()[0] != "Penguin"
            && s.getResult()[0] != "Diamond" )
            && ( s.getResult()[0] == s.getResult()[1] && s.getResult()[1] == s.getResult()[2] ) )
        {
            assertEquals( s.getPay(), 900 );
        }
        else if ( ( s.getResult()[0] == s.getResult()[1] && s.getResult()[1] != s.getResult()[2] )
            || ( s.getResult()[1] == s.getResult()[2] && s.getResult()[0] != s.getResult()[2] )
            || ( s.getResult()[0] == s.getResult()[2] && s.getResult()[1] != s.getResult()[2] ) )
        {
            assertEquals( s.getPay(), 20 );
        }

    }


    /**
     * checks if total returned is correct
     */
    @Test
    public void slotgetTotal()
    {
        int testInt = 100;
        SlotMachine s = new SlotMachine();
        assertEquals( testInt, s.getTotal() );
    }


    /**
     * 
     * checks that starting balance is restored
     */
    @Test
    public void slotgetReset()
    {
        int testInt = 90;
        Casino c = new Casino( testInt );
        SlotMachine s = new SlotMachine();
        s.reset();
        assertEquals( 100, c.getMoney() );
    }


    // Blackjack tests
    /**
     * 
     * tests constructor by creating blackjack object, testing if correct
     * balance
     */
    @Test
    public void blackjackConstructor()
    {
        int testInt = 1000;
        Blackjack j = new Blackjack();
        Casino c = new Casino( testInt );
        assertNotNull( j.getDeck() );
        assertEquals( 1000, c.getMoney() );
    }


    /**
     * 
     * checks that some hand is created
     */
    @Test
    public void blackjacksetHand()
    {
        Blackjack j = new Blackjack();
        j.setHand();
        for ( Card c : j.getPlayer() )
        {
            assertNotNull( c );
        }
    }


    /**
     * 
     * checks that both hands are cleared by checking each element.
     */
    @Test
    public void blackjackclearHands()
    {
        Blackjack j = new Blackjack();
        j.setHand();
        for ( Card c : j.getPlayer() )
        {
            assertNull( c );
        }
        for ( Card c : j.getDealer() )
        {
            assertNull( c );
        }

    }


    /**
     * 
     * checks that something is returned.
     */
    @Test
    public void blackjackgetPlayer()
    {
        Blackjack j = new Blackjack();

        assertNotNull( j.getPlayer() );

    }


    /**
     * 
     * checks that something is returned
     */
    @Test
    public void blackjackgetDealer()
    {
        Blackjack j = new Blackjack();
        for ( Card c : j.getDealer() )
        {
            assertNotNull( c );
        }
    }


    /**
     * 
     * checks that it correctly calculates a sum by using a test case
     */
    @Test
    public void blackjackgetSum()
    {
        Blackjack j = new Blackjack();
        Card ten = new Card( "ten", 10 );
        Card two = new Card( "two", 2 );
        ArrayList<Card> cards = new ArrayList<Card>();
        cards.add( ten );
        cards.add( two );
        assertEquals( 12, j.getSum( cards ) );
    }


    /**
     * 
     * uses a test case to test that the hand is increased by one card
     */
    @Test
    public void blackjackHit()
    {
        Blackjack j = new Blackjack();
        Card ten = new Card( "ten", 10 );
        Card two = new Card( "two", 2 );
        ArrayList<Card> cards = new ArrayList<Card>();
        cards.add( ten );
        cards.add( two );
        j.hit( cards );
        assertNotNull( cards.get( 0 ) );
        assertNotNull( cards.get( 1 ) );
        assertNotNull( cards.get( 2 ) );

    }

}
