package test;

import java.util.ArrayList;
/**
 * 
 *  Contains methods used to create blackjack game in bjack window. Gives you a hand 
 *  and alows you to hit. Other helper methods created to be used in window
 *  Blackjack class creates a deck of all the unique cards, assigns the user to begin with,
 *  and then has the method behind the "hit" button in the window. Has method to reset hand
 *  when user starts a new game as well as other helper methods
 *
 *  @author  mihirhasan
 *  @version May 21, 2018
 *  @author  Period: 2
 *  @author  Assignment: CasiYES
 *
 *  @author  Sources: Dave
 */
/**
 */
public class Blackjack
{
    ArrayList<Card> deck = new ArrayList<Card>();
    ArrayList<Card> playerHand = new ArrayList<Card>();
    ArrayList<Card> dealerHand = new ArrayList<Card>();

    Casino player;
    
    /**
     * Constructor. Creates the "deck" and gives the user 1000 coins to begin with
     */
    public Blackjack()
    {
        deck.add( new Card( "Ace", 1 ) );
        deck.add( new Card( "Two", 2 ) );
        deck.add( new Card( "Three", 3 ) );
        deck.add( new Card( "Four", 4 ) );
        deck.add( new Card( "Five", 5 ) );
        deck.add( new Card( "Six", 6 ) );
        deck.add( new Card( "Seven", 7 ) );
        deck.add( new Card( "Eight", 8 ) );
        deck.add( new Card( "Nine", 9 ) );
        deck.add( new Card( "Ten", 10 ) );
        deck.add( new Card( "Queen", 10 ) );
        deck.add( new Card( "King", 10 ) );
        deck.add( new Card( "Jack", 10 ) );
        
        

        
       player = new Casino(1000);

    }
    
    /**
     * 
     * gives user and dealer two random cards each to start with.
     */
    public void setHand()
    {
        playerHand.add( deck.get( (int)(Math.random() * 13 )));
        playerHand.add( deck.get( (int)(Math.random() * 13 )));
        
        for(int i = 0; i < playerHand.size(); i++)
        {
            if(playerHand.get( i ).getName() == "Ace")
            {
                if(getSum(playerHand) > 11)
                {
                    playerHand.get( i ).setAce( 1 );
                }

                if(getSum(playerHand) <= 11)
                {
                    playerHand.get( i ).setAce( 11 );
                }
            }
        }
        
        dealerHand.add( deck.get( (int)(Math.random() * 13 )));
        dealerHand.add( deck.get( (int)(Math.random() * 13 )));
        
        for(int i = 0; i < dealerHand.size(); i++)
        {
            if(dealerHand.get( i ).getName() == "Ace")
            {
                if(getSum(dealerHand) > 11)
                {
                    dealerHand.get( i ).setAce( 1 );
                }

                if(getSum(dealerHand) <= 11)
                {
                    dealerHand.get( i ).setAce( 11 );
                }
            }
        }
       
    }
    /**
     * 
     * Clears the hand for both player and dealer before starting a new game. 
     */
    public void clearHands()
    {
        for(int i = playerHand.size() - 1; i >= 0 ; i--)
        {
            playerHand.remove( i );
        }
        for(int i = dealerHand.size() - 1; i >= 0 ; i--)
        {
            dealerHand.remove( i );
        }
    }
    /**
     * 
     * used to access the player's hand in the window class
     * @return player's hand
     */
    public ArrayList<Card> getPlayer()
    {
        return playerHand;
    }
    /**
     * 
     * used to access the dealer's hand in the window class
     * @return dealer's hand
     */
    public ArrayList<Card> getDealer()
    {
        return dealerHand;
    }
    /**
     * 
     * Adds up the sum of the values of the cards in a hand. E.g calling getSum on a hand
     * of a queen and a two would return 12.
     * @param Hand the hand to be summed. Either player or dealer.
     * @return sum of the values of the hand
     */
    public int getSum(ArrayList<Card> Hand)
    {   
        int sum = 0;
        for(int i = 0; i < Hand.size(); i++)
        {
            sum += Hand.get(i).getVal();
        }
        return sum;
    }
    /**
     * 
     * The functionality behind the "hit" button. Gives the player one additional card.
     * If the card received is an ace, it automatically sets to 1 or 11. its 11 if the 
     * sum is 10 or below, and 1 if its above 10. The user does not choose
     * @param Hand the hand of either the player or dealer
     */
    public void hit(ArrayList<Card> Hand)
    {
        Card nextCard =( deck.get( (int)(Math.random() * 13 )));

        Hand.add( nextCard );
      
        
    }
    //testing method
    /**
     * 
     * accesses deck to be used in JUnits
     * @return arraylist of cards
     */
    public ArrayList<Card> getDeck()
    {
        return deck;
    }
}


