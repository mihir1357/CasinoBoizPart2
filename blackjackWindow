package test;

import java.awt.*;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.ArrayList;
import javax.swing.JLabel;


public class BjackWindow extends JFrame implements ActionListener
{
    private static final String PROMPT = ">> ";

    private JButton betBtn;

    private JButton hit, stay, back;

    private JTextField bet;

    private JTextArea msgArea;

    private Blackjack blackjack;


    /**
     * Constructs a new blackjack window. Blackjack window has 4 buttons for
     * hit, stay, bet and back (to return to home screen). It also has a
     * textfield for the user to enter the bet and a message area for the game
     * to be displayed in
     * 
     * @param blackjack
     *            blackjack class controls functionality behind buttons
     */
    public BjackWindow( Blackjack bj )
    {
        super( "Blackjack" );

        blackjack = bj;

        addWindowListener( new WindowAdapter()
        {
            public void windowClosing( WindowEvent e )
            {
            }
        } );

        JPanel panel = new JPanel();
        GridBagLayout gbLayout = new GridBagLayout();
        panel.setLayout( gbLayout );
        panel.setBorder( new EmptyBorder( 10, 10, 10, 10 ) );

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel label = new JLabel( "Bet Amount:  ", JLabel.RIGHT );
        gbc.gridy = 0;
        gbc.gridx = 0;
        gbc.gridwidth = 1;
        gbc.gridheight = 1;
        gbLayout.setConstraints( label, gbc );
        panel.add( label );
        bet = new JTextField( 5 );
        bet.setBackground( Color.cyan );
        gbc.gridy = 0;
        gbc.gridx = 1;
        gbc.gridwidth = 1;
        gbLayout.setConstraints( bet, gbc );
        panel.add( bet );

        JLabel filler = new JLabel( " " );
        gbc.gridy = 1;
        gbc.gridx = 0;
        gbc.gridwidth = 3;
        gbLayout.setConstraints( filler, gbc );
        panel.add( filler );

        label = new JLabel( "Move:", JLabel.RIGHT );
        gbc.gridy = 4;
        gbc.gridx = 0;
        gbc.gridwidth = 1;
        gbLayout.setConstraints( label, gbc );
        panel.add( label );

        filler = new JLabel( " " );
        gbc.gridy = 6;
        gbc.gridx = 0;
        gbc.gridwidth = 3;
        gbLayout.setConstraints( filler, gbc );
        panel.add( filler );

        ButtonGroup gr = new ButtonGroup();
        hit = new JButton( "Hit" );
        stay = new JButton( "Stay" );

        hit.addActionListener( this );
        stay.addActionListener( this );

        gr.add( hit );
        gr.add( stay );

        hit.setEnabled( false );
        stay.setEnabled( false );

        gbc.gridy = 4;
        gbc.gridx = 1;
        gbc.gridwidth = 1;

        gbLayout.setConstraints( hit, gbc );
        panel.add( hit );
        hit.setActionCommand( "Hit" );
        gbc.gridy = 5;

        gbLayout.addLayoutComponent( stay, gbc );
        panel.add( stay );
        stay.setActionCommand( "Stay" );
        gbc.gridy = 6;

        betBtn = new JButton( "Bet" );
        betBtn.addActionListener( this );
        betBtn.setActionCommand( "bet" );
        gbc.gridy = 8;
        gbc.gridx = 1;
        gbc.gridwidth = 2;
        gbLayout.setConstraints( betBtn, gbc );
        panel.add( betBtn );

        back = new JButton( "Back" );
        back.addActionListener( this );
        gbLayout.addLayoutComponent( back, gbc );
        panel.add( back );
        back.setActionCommand( "Back" );
        gbc.gridy = 12;
        gbc.gridx = 1;
        gbc.gridwidth = 2;
        gbLayout.setConstraints( back, gbc );

        msgArea = new JTextArea( 10, 30 );
        msgArea.setLineWrap( true );
        msgArea.setWrapStyleWord( true );
        msgArea.setEditable( false );
        msgArea.setBorder( new EmptyBorder( 5, 10, 5, 10 ) );
        JScrollPane areaScrollPane = new JScrollPane( msgArea );
        areaScrollPane.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_ALWAYS );
        areaScrollPane.setBorder( new EmptyBorder( 5, 0, 5, 0 ) );

        Box b = Box.createHorizontalBox();
        b.add( panel );
        b.add( areaScrollPane );
        Container c = getContentPane();
        c.add( b );

        int x = (int)( Math.random() * 500 );
        int y = (int)( Math.random() * 300 );
        setBounds( x, y, 500, 280 );

        showMessage( "This is a blackjack game. You will be playing against the dealer. Y"
            + "ou will start with 1000 coins."
            + "Enter a bet in the text box and press the 'Bet' button to start the game. "
            + "Click 'Hit' to take another card from the deck, and 'Stay' to stop drawing.Press 'Back' to return to the home screen" );
        showMessage("");
        showMessage( "Balance: " + blackjack.player.getMoney() );
        setVisible( true );

    }


    /**
     * Displays a message in this window's text area.
     * 
     * @param msg
     *            the message to be displayed.
     */
    public void showMessage( String msg )
    {
        msgArea.append( msg + "\n\n" );
    }


    // no line

    /**
     * Displays a message in this window's text area but without creating a new
     * line.
     * 
     * @param msg
     *            the message to be displayed.
     */
    public void showMessage2( String msg )
    {
        msgArea.append( msg );
    }


    /**
     * Processes GUI events in this window. Handles all the button clicks and displays results 
     * in text area. Disables and enables GUI features as necessary
     * 
     * @param e
     *            an event.
     */
    public void actionPerformed( ActionEvent e )
    {
        ArrayList<Card> playerHand = blackjack.getPlayer();
       
        if ( e.getActionCommand().equals( "Hit" ) )
        {
            blackjack.hit( blackjack.getPlayer() );
            showMessage( "You chose to Hit!" );
            showMessage2( "Current Hand: " );
            for ( int i = 0; i < playerHand.size(); i++ )
            {
                showMessage2( playerHand.get( i ).getName() + "  " );
            }
            showMessage("");
            
            //check if it was an ace that caused the bust
            if ( blackjack.getSum( blackjack.getPlayer() ) > 21 )
            { 
                int i = 0;
                while( blackjack.getSum( blackjack.getPlayer()) > 21 && i < blackjack.getPlayer().size())
                {

    
                        if(blackjack.getPlayer().get(i).getName() == "Ace")
                        {
                            blackjack.getPlayer().get( i ).setAce( 1 );
         
                        }
    
                    i++;
                }
            }
            if ( blackjack.getSum( playerHand ) > 21 )
            {
                showMessage( "You busted! Game over. Enter a new bet to play again." );
                bet.setText( "" );
              
                hit.setEnabled( false );
                stay.setEnabled( false );
                bet.setEditable( true );
                betBtn.setEnabled(true);
            }

        }
        else if ( e.getActionCommand().equals( "Stay" ) )
        {
            while ( blackjack.getSum( blackjack.getDealer() ) <= 16 )
            {
                blackjack.hit( blackjack.getDealer() );

            }
            if ( blackjack.getSum( blackjack.getDealer()) > 21 )
            { 
                int i = 0;
                while( blackjack.getSum( blackjack.getDealer()) > 21 && i < blackjack.getDealer().size())
                {

    
                        if(blackjack.getDealer().get(i).getName() == "Ace")
                        {
                            blackjack.getDealer().get( i ).setAce( 1 );
         
                        }
    
                    i++;
                }
            }
            //Hit again in case sum changed
            while ( blackjack.getSum( blackjack.getDealer() ) <= 16 )
            {
                blackjack.hit( blackjack.getDealer() );

            }
            
            if(blackjack.getSum( blackjack.getDealer()) > 21)
            {
               blackjack.player.addMoney( Integer.parseInt( bet.getText() )* 2 );
               showMessage2( "Dealer's hand: " );
              
               for ( int i = 0; i < blackjack.getDealer().size(); i++ )
               {
                   showMessage2( blackjack.getDealer().get( i ).getName() + "  " );
               }
               showMessage("");
               showMessage("The dealer busted. You won! ");

               showMessage( "Balance: " + blackjack.player.getMoney() );
               bet.setText( "" );

            }
            
            else if ( blackjack.getSum( playerHand ) > blackjack.getSum( blackjack.getDealer() ) )
            {
                showMessage( "You won!" );
                blackjack.player.addMoney( Integer.parseInt( bet.getText() )* 2 );
                showMessage2( "Dealer's hand: " );
               
                for ( int i = 0; i < blackjack.getDealer().size(); i++ )
                {
                    showMessage2( blackjack.getDealer().get( i ).getName() + "  " );
                }
                showMessage("");
                showMessage2( "Balance: " + blackjack.player.getMoney() );


            }
            else if ( blackjack.getSum( playerHand ) < blackjack.getSum( blackjack.getDealer() ) )
            {
                showMessage( "You lost to the dealer! " );
                showMessage2( "Dealer's hand: " );
                for ( int i = 0; i < blackjack.getDealer().size(); i++ )
                {
                    showMessage2( blackjack.getDealer().get( i ).getName() + "  " );
                }
                showMessage("");
                showMessage( "Balance: " + blackjack.player.getMoney() );

                if(blackjack.player.getMoney() > 0)
                {
                    showMessage("Enter a new bet to play again");
                    bet.setText( "" );


                }
                
                if(blackjack.player.getMoney() < 1)
                {
                    showMessage("You are out of money. Enter a new bet to restart the game");
                    blackjack.player.setMoney( 1000 );

                }

            }
            else
            {
                showMessage( "You tied with the dealer!" );
                blackjack.player.addMoney( Integer.parseInt( bet.getText() ) );
                showMessage2( "Dealer's hand: " );
                for ( int i = 0; i < blackjack.getDealer().size(); i++ )
                {
                    showMessage2( blackjack.getDealer().get( i ).getName() + "  " );
                }
                showMessage("");
                showMessage( "Your current balance is " + blackjack.player.getMoney() );
                showMessage( "Enter a new bet to play again" );
                bet.setText( "" );



            }
            hit.setEnabled( false );
            stay.setEnabled( false );
            betBtn.setEnabled( true );
            bet.setEditable(true);
        }

        else if ( e.getActionCommand().equals( "bet" ) )
        {

            msgArea.setText( "" );
            try {
            if(Integer.parseInt( bet.getText() ) < 1)
            {
                showMessage("Please enter a valid bet");
            }
            else if ( blackjack.player.getMoney() < Integer.parseInt( bet.getText() ) )
            {
                showMessage( "Sorry, you don't have enough money for that." );
                showMessage( "Your current balance is " + blackjack.player.getMoney() );
            }
            else
            {
                blackjack.clearHands();
                blackjack.setHand();
                blackjack.player.removeMoney( Integer.parseInt( bet.getText() ) );
                showMessage( "Balance: " + ( blackjack.player.getMoney() ) );
                bet.setEditable( false );
                showMessage2( "Current hand: " );
                for ( int i = 0; i < playerHand.size(); i++ )
                {
                    showMessage2( playerHand.get( i ).getName() + "  " );
                }
                showMessage("");

            }
            hit.setEnabled( true );
            stay.setEnabled( true );
            betBtn.setEnabled( false );
            }
            catch( Exception ex)
            {  
            
            showMessage( "Please enter a valid bet" );
            hit.setEnabled( false );
            stay.setEnabled( false );
            }

        }
        
        else if ( e.getActionCommand().equals( "Back" ) )
        {
            casinoWindow casino = new casinoWindow();
            casino.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
            casino.setBounds( 0, 0, 500, 350 );
            casino.setVisible( true );
            dispose();
        }
    }

}
